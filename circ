#!/usr/bin/perl -w

use strict;
use SVG;
use Getopt::Long qw(:config no_ignore_case);

my $help;
my $m = 10;
my $n = 3;
my $R = 300;
my $a = 0.0;
my $weight = '1.25pt';
my $debug;
my $W = 1000;
my $H = 1000;
my $pi = 3.14159265358;

my $result = GetOptions(
    'help|?'    => \$help,
    'groups=i'  => \$m,
    'circles=i' => \$n,
    'radius=i'  => \$R,
    'width|w=i' => \$W,
    'height=i'  => \$H,
    'angle=f'   => \$a,
    'weight|W=s'=> \$weight,
    'debug'     => \$debug,
);

if($help || !$result) {
    my $usage = <<USAGE;
Usage: circ [-h|options]
Render to standard out an SVG image of a set of nested circles spinning
around the circumference of a central circle.

Options:
    -h --help          Print help and exit
    -g --groups=10     Make this many groups of circles
    -c --circles=3     Make this many circles in each group
    -r --radius=300    Distribute groups around a cirlce of this pixel radius
    -w --width=1000    Width of canvas in pixels
    -h --height=1000   Height of canvas in pixels
    -a --angle=0.0     Angle in degress to rotate inner arcs
    -W --weight=1.25pt Stroke weight (2.5pt, 5px, etc.)
    -d --debug         Render additional figures for debugging
USAGE
    if($help) {
        print $usage;
        exit;
    }
    else {
        print STDERR $usage;
        exit 1;
    }
}

if($weight !~ /\d+(\.\d+)?(pt|px)/) {
    print STDERR "Weight was not understood; see circ --help for details.\n";
    exit 2;
}

my $svg = SVG->new(width => $W, height => $H);
$svg->title()->cdata("Circo with $m groups of $n circles");

my $cx = $W/2;
my $cy = $H/2;

my $base_style = {
    opacity => 1,
    fill => 'none',
    stroke => '#000000',
    'stroke-width' => $weight,
    'stroke-opacity' => 1,
};

my $main   = $svg->group(style => $base_style);
my $outers = $svg->group(style => $base_style);
my $inners = $svg->group(style => $base_style, transform => "rotate($a $cx $cy)");

$main->circle(cx => $cx, cy => $cy, r => $R);
$main->circle(cx => $cx, cy => $cy, r => 2) if $debug;

my $total = $m * (2 * $n + 1); # Total points around circumference
for my $i (0..$m-1) {
    # Group-center of circlets
    my $gx = $cx + $R * sin($i/$m * 2 * $pi);
    my $gy = $cy + $R * cos($i/$m * 2 * $pi);

    $main->circle(cx => $gx, cy => $gy, r => 2) if $debug;

    for my $j (1..$n) {
        # Angle that the circle subtends along the circumference
        my $f = 2 * $j * 2 * $pi / $total;

        # Radius of unique circle intersecting orthogonally at that angle
        my $gr = $R * sin($f/2)/cos($f/2);

        # Offset of the center of that circle from the group center
        my $h = $R * (1/cos($f/2) - 1);
        my $hx = $gx + $h * sin($i/$m * 2 * $pi);
        my $hy = $gy + $h * cos($i/$m * 2 * $pi);

        # Angle of points along circumference for starts and ends of arcs
        my $alpha = ($i/$m + $j/$total) * 2 * $pi;
        my $beta  = ($i/$m - $j/$total) * 2 * $pi;

        if($debug) {
            $main->circle(cx => $hx, cy => $hy, r => 2);
            $main->circle(
                cx => $cx + $R * sin($alpha),
                cy => $cy + $R * cos($alpha),
                r => 2,
            );
            $main->circle(
                cx => $cx + $R * sin($beta),
                cy => $cy + $R * cos($beta),
                r => 2,
            );
        }

        my $d = 'M '.($cx + $R * sin($alpha)).','.($cy + $R * cos($alpha))
            .' A '.$gr.' '.$gr.' 0 0 0 '
            .($cx + $R * sin($beta)).','.($cy + $R * cos($beta))
        ;
        $inners->tag('path', d => $d);

        $d = 'M '.($cx + $R * sin($beta)).','.($cy + $R * cos($beta))
            .' A '.$gr.' '.$gr.' 0 1 0 '
            .($cx + $R * sin($alpha)).','.($cy + $R * cos($alpha))
        ;
        $outers->tag('path', d => $d);
    }
}

print $svg->xmlify;

